{"ast":null,"code":"export default {\n  data() {\n    return {\n      // 查询条件\n      queryInfo: {\n        type: 3,\n        pagenum: 1,\n        pagesize: 5\n      },\n      // 商品分类的数据列表\n      cateList: [],\n      // 总数据条数\n      total: 0,\n      // 为table指定列的定义，在数据中添加columns\n      columns: [{\n        label: '分类名称',\n        prop: 'cat_name' // 对应列内容的属性名称\n      }, {\n        label: '是否有效',\n        // 表示将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'isok'\n      }, {\n        label: '排序',\n        // 表示将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'order'\n      }, {\n        label: '操作',\n        // 表示将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'opt'\n      }],\n      // 控制添加分类对话框的显示与隐藏\n      addCateDialogVisible: false,\n      // 添加分类的表单数据对象\n      addCateForm: {\n        // 将要添加分类的名称\n        cat_name: '',\n        // 父级分类的id\n        cat_pid: 0,\n        // 分类的等级，默认添加的是一级分类\n        cat_level: 0\n      },\n      // 添加分类表单的验证规则对象\n      addCateFormRules: {\n        cat_name: [{\n          required: true,\n          message: '请输入分类名称',\n          trigger: 'blur'\n        }]\n      },\n      // 父级分类的列表\n      parentCateList: [],\n      // 指定级联选择器的配置对象\n      cascaderProps: {\n        expandTrigger: 'hover',\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children',\n        checkStrictly: true\n      },\n      // 选中的父级分类的id数组\n      selectedKeys: [],\n      // 控制修改分类名称对话框的显示与隐藏\n      editDialogVisible: false,\n      editCateForm: {}\n    };\n  },\n  created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取商品分类数据\n    async getCateList() {\n      const {\n        data: result\n      } = await this.request.get('/admin/categories', {\n        params: this.queryInfo\n      });\n      if (result.meta.status !== 200) {\n        return this.$message.error('获取商品分类失败！');\n      }\n      // 把数据列表赋值给cateList\n      // console.log(result)\n      console.log(result.data);\n      this.cateList = result.data.result;\n      // 为总数据条数赋值\n      // console.log(result.total)\n      this.total = result.data.total;\n    },\n    // 监听pagesize改变的事件\n    handleSizeChange(newSize) {\n      this.queryInfo.pagesize = newSize;\n      // 刷新数据\n      this.getCateList();\n    },\n    // 监听pagenum改变的事件\n    handleCurrentChange(newPage) {\n      this.queryInfo.pagenum = newPage;\n      this.getCateList();\n    },\n    // 点击按钮，显示对话框\n    showAddCatDialog() {\n      // 先获取父级分类的数据列表\n      this.getParentCateList();\n      // 再展示对话框\n      this.addCateDialogVisible = true;\n    },\n    // 获取父级分类的数据列表\n    async getParentCateList() {\n      const {\n        data: result\n      } = await this.request.get('/admin/categories', {\n        params: {\n          type: 2\n        }\n      });\n      if (result.meta.status !== 200) {\n        return this.$message.error('获取父级分类数据失败！');\n      }\n      this.parentCateList = result.data;\n    },\n    // 选择项发生变化触发\n    parentCateChanged() {\n      // console.log(this.selectedKeys)\n\n      // 如果selectedKeys数组中的length大于0，证明选中的父级分类\n      if (this.selectedKeys.length > 0) {\n        // 父级分类的id\n        this.addCateForm.cat_pid = this.selectedKeys[this.selectedKeys.length - 1];\n        // 为当前分类的等级赋值\n        this.addCateForm.cat_level = this.selectedKeys.length;\n      } else {\n        // 反之，就说明没有选中任何父级分类\n        this.addCateForm.cat_pid = 0;\n        this.addCateForm.cat_level = 0;\n      }\n    },\n    // 点击确定按钮添加新的分类\n    addCate() {\n      // console.log(this.addCateForm)\n      this.$refs.addCateFormRef.validate(async valid => {\n        if (!valid) return this.$message.error('表单预校验失败！');\n        const {\n          data: result\n        } = await this.request.post('/admin/categories', this.addCateForm);\n        if (result.meta.status !== 201) {\n          return this.$message.error('添加分类失败！');\n        }\n        this.$message.success('添加分类成功');\n        // 刷新列表\n        this.getCateList();\n        // 隐藏对话框\n        this.addCateDialogVisible = false;\n      });\n    },\n    // 监听对话框的关闭事件，重置表单数据\n    addCateDialogClosed() {\n      this.$refs.addCateFormRef.resetFields();\n      this.selectedKeys = [];\n      this.addCateForm.cat_level = 0;\n      this.addCateForm.cat_pid = 0;\n    },\n    // 展示编辑分类名称的对话框\n    async showEditDialog(id) {\n      this.editDialogVisible = true;\n      const {\n        data: result\n      } = await this.request.get(`/admin/categories/${id}`);\n      if (result.meta.status !== 200) {\n        return this.$message.error('查询分类数据失败！');\n      }\n      console.log(result.data);\n      this.editCateForm = result.data;\n    },\n    // 监听修改分类名称对话框的关闭事件\n    editDialogClosed() {\n      this.$refs.editCateFormRef.resetFields();\n    },\n    // 修改分类名称信息，并提交\n    editCateInfo() {\n      this.$refs.editCateFormRef.validate(async valid => {\n        if (!valid) return;\n        // 发起修改分类名称的数据请求\n        const {\n          data: result\n        } = await this.request.put(`/admin/categories/${this.editCateForm.cat_id}`, {\n          cat_name: this.editCateForm.cat_name\n        });\n        if (result.meta.status !== 200) return this.$message.error('更新分类名称失败！');\n        // 关闭对话框\n        this.editDialogVisible = false;\n        // 重新获取用户列表\n        this.getCateList();\n        // 提示修改成功\n        this.$message.success('更新分类名称成功！');\n      });\n    },\n    async removeCateById(id) {\n      // 弹框提示用户是否删除数据\n      const confirmResult = await this.$confirm('此操作将永久删除该分类，是否继续？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(error => error);\n      // console.log(confirmResult) // 确定：'confirm' 取消：报错:cancel catch之后就是'canel'\n      if (confirmResult !== 'confirm') {\n        return this.$message.info('已经取消删除');\n      }\n      const {\n        data: result\n      } = await this.request.delete('/admin/categories/' + id);\n      if (result.meta.status !== 200) {\n        return this.$message.error('删除分类失败');\n      }\n      this.$message.success('删除分类成功');\n      this.getCateList();\n    }\n  }\n};","map":{"version":3,"mappings":"AAsIA;EACAA;IACA;MACA;MACAC;QACAC;QACAC;QACAC;MACA;MACA;MACAC;MACA;MACAC;MACA;MACAC,UACA;QACAC;QACAC;MACA,GACA;QACAD;QACA;QACAN;QACA;QACAQ;MACA,GACA;QACAF;QACA;QACAN;QACA;QACAQ;MACA,GACA;QACAF;QACA;QACAN;QACA;QACAQ;MACA,EACA;MACA;MACAC;MACA;MACAC;QACA;QACAC;QACA;QACAC;QACA;QACAC;MACA;MACA;MACAC;QACAH,WACA;UAAAI;UAAAC;UAAAC;QAAA;MAEA;MACA;MACAC;MACA;MACAC;QACAC;QACAC;QACAf;QACAgB;QACAC;MACA;MACA;MACAC;MACA;MACAC;MACAC;IACA;EACA;EACAC;IACA;EACA;EACAC;IACA;IACA;MACA;QAAA9B;MAAA;QACA+B;MACA;MACA;QACA;MACA;MACA;MACA;MACAC;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACA;IACA;MACA;QAAAnC;MAAA;QACA+B;UAAA7B;QAAA;MACA;MACA;QACA;MACA;MACA;IACA;IACA;IACAkC;MACA;;MAEA;MACA;QACA;QACA,6CACA,6BACA;QACA;QACA;MACA;QACA;QACA;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;QACA;QACA;UAAArC;QAAA,4BACA,qBACA,iBACA;QACA;UACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACA;IACAsC;MACA;MACA;MACA;MACA;IACA;IACA;IACA;MACA;MACA;QAAAtC;MAAA;MACA;QACA;MACA;MACAgC;MACA;IACA;IACA;IACAO;MACA;IACA;IACA;IACAC;MACA;QACA;QACA;QACA;UAAAxC;QAAA;UAAAa;QAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;QACA4B;QACAC;QACAxC;MACA;MACA;MACA;QACA;MACA;MACA;QAAAF;MAAA;MACA;QACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["data","queryInfo","type","pagenum","pagesize","cateList","total","columns","label","prop","template","addCateDialogVisible","addCateForm","cat_name","cat_pid","cat_level","addCateFormRules","required","message","trigger","parentCateList","cascaderProps","expandTrigger","value","children","checkStrictly","selectedKeys","editDialogVisible","editCateForm","created","methods","params","console","handleSizeChange","handleCurrentChange","showAddCatDialog","parentCateChanged","addCate","addCateDialogClosed","editDialogClosed","editCateInfo","confirmButtonText","cancelButtonText"],"sourceRoot":"src/views","sources":["CategoryManage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 卡片视图区域 -->\r\n        <el-card>\r\n            <el-row>\r\n                <el-col>\r\n                    <el-button type=\"primary\" @click=\"showAddCatDialog\"\r\n                    >添加分类</el-button\r\n                    >\r\n                </el-col>\r\n            </el-row>\r\n            <!-- 表格区域 :data(设置数据源) :columns(设置表格中列配置信息) :selection-type(是否有复选框) :expand-type(是否展开数据) show-index(是否设置索引列) index-text(设置索引列头) border(是否添加纵向边框) :show-row-hover(是否鼠标悬停高亮) -->\r\n            <tree-table\r\n                    :data=\"cateList\"\r\n                    :columns=\"columns\"\r\n                    :selection-type=\"false\"\r\n                    :expand-type=\"false\"\r\n                    show-index\r\n                    index-text=\"\"\r\n                    border\r\n                    class=\"treetable\"\r\n            >\r\n                <!-- 是否有效 -->\r\n                <template slot=\"isok\" slot-scope=\"scope\">\r\n                    <i\r\n                            class=\"el-icon-success\"\r\n                            v-if=\"scope.row.status === false\"\r\n                            style=\"color: lightgreen\"\r\n                    ></i>\r\n                    <i class=\"el-icon-error\" v-else style=\"color: red\"></i>\r\n                </template>\r\n\r\n                <!-- 排序 -->\r\n                <template slot=\"order\" slot-scope=\"scope\">\r\n                    <el-tag size=\"mini\" v-if=\"scope.row.cat_level === 0\">一级</el-tag>\r\n                    <el-tag\r\n                            type=\"success\"\r\n                            size=\"mini\"\r\n                            v-else-if=\"scope.row.cat_level === 1\"\r\n                    >二级</el-tag\r\n                    >\r\n                    <el-tag type=\"warning\" size=\"mini\" v-else>三级</el-tag>\r\n                </template>\r\n\r\n                <!-- 操作 -->\r\n                <template slot=\"opt\" slot-scope=\"scope\">\r\n                    <el-button\r\n                            type=\"primary\"\r\n                            icon=\"el-icon-edit\"\r\n                            size=\"mini\"\r\n                            @click=\"showEditDialog(scope.row.cat_id)\"\r\n                    >编辑</el-button\r\n                    >\r\n                    <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeCateById(scope.row.cat_id)\"\r\n                    >删除</el-button\r\n                    >\r\n                </template>\r\n            </tree-table>\r\n\r\n            <!-- 分页区域 -->\r\n            <el-pagination\r\n                    @size-change=\"handleSizeChange\"\r\n                    @current-change=\"handleCurrentChange\"\r\n                    :current-page=\"queryInfo.pagenum\"\r\n                    :page-sizes=\"[3, 5, 10, 15]\"\r\n                    :page-size=\"queryInfo.pagesize\"\r\n                    layout=\"total, sizes, prev, pager, next, jumper\"\r\n                    :total=\"total\"\r\n            >\r\n            </el-pagination>\r\n        </el-card>\r\n\r\n        <!-- 添加分类对话框 -->\r\n        <el-dialog\r\n                title=\"添加分类\"\r\n                :visible.sync=\"addCateDialogVisible\"\r\n                width=\"50%\"\r\n                @close=\"addCateDialogClosed\"\r\n        >\r\n            <!-- 添加分类的表单 -->\r\n            <el-form\r\n                    :model=\"addCateForm\"\r\n                    :rules=\"addCateFormRules\"\r\n                    ref=\"addCateFormRef\"\r\n                    label-width=\"100px\"\r\n            >\r\n                <el-form-item label=\"分类名称：\" prop=\"cat_name\">\r\n                    <el-input v-model=\"addCateForm.cat_name\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"父级分类：\">\r\n                    <el-cascader\r\n                            v-model=\"selectedKeys\"\r\n                            :options=\"parentCateList\"\r\n                            :props=\"cascaderProps\"\r\n                            @change=\"parentCateChanged\"\r\n                            clearable\r\n                            change-on-select\r\n                    ></el-cascader>\r\n                </el-form-item>\r\n            </el-form>\r\n            <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addCateDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addCate\">确 定</el-button>\r\n      </span>\r\n        </el-dialog>\r\n\r\n        <!-- 修改分类名称的对话框 -->\r\n        <el-dialog\r\n                title=\"修改分类\"\r\n                :visible.sync=\"editDialogVisible\"\r\n                width=\"50%\"\r\n                @close=\"editDialogClosed\"\r\n        >\r\n            <!-- 内容主体区域 -->\r\n            <el-form\r\n                    :model=\"editCateForm\"\r\n                    :rules=\"addCateFormRules\"\r\n                    ref=\"editCateFormRef\"\r\n                    label-width=\"100px\"\r\n            >\r\n                <el-form-item label=\"分类名称：\" prop=\"cat_name\">\r\n                    <el-input v-model=\"editCateForm.cat_name\"></el-input>\r\n                </el-form-item>\r\n            </el-form>\r\n            <!-- 底部区域 -->\r\n            <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"editCateInfo\">确 定</el-button>\r\n      </span>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                // 查询条件\r\n                queryInfo: {\r\n                    type: 3,\r\n                    pagenum: 1,\r\n                    pagesize: 5\r\n                },\r\n                // 商品分类的数据列表\r\n                cateList: [],\r\n                // 总数据条数\r\n                total: 0,\r\n                // 为table指定列的定义，在数据中添加columns\r\n                columns: [\r\n                    {\r\n                        label: '分类名称',\r\n                        prop: 'cat_name' // 对应列内容的属性名称\r\n                    },\r\n                    {\r\n                        label: '是否有效',\r\n                        // 表示将当前列定义为模板列\r\n                        type: 'template',\r\n                        // 表示当前这一列使用模板名称\r\n                        template: 'isok'\r\n                    },\r\n                    {\r\n                        label: '排序',\r\n                        // 表示将当前列定义为模板列\r\n                        type: 'template',\r\n                        // 表示当前这一列使用模板名称\r\n                        template: 'order'\r\n                    },\r\n                    {\r\n                        label: '操作',\r\n                        // 表示将当前列定义为模板列\r\n                        type: 'template',\r\n                        // 表示当前这一列使用模板名称\r\n                        template: 'opt'\r\n                    }\r\n                ],\r\n                // 控制添加分类对话框的显示与隐藏\r\n                addCateDialogVisible: false,\r\n                // 添加分类的表单数据对象\r\n                addCateForm: {\r\n                    // 将要添加分类的名称\r\n                    cat_name: '',\r\n                    // 父级分类的id\r\n                    cat_pid: 0,\r\n                    // 分类的等级，默认添加的是一级分类\r\n                    cat_level: 0\r\n                },\r\n                // 添加分类表单的验证规则对象\r\n                addCateFormRules: {\r\n                    cat_name: [\r\n                        { required: true, message: '请输入分类名称', trigger: 'blur' }\r\n                    ]\r\n                },\r\n                // 父级分类的列表\r\n                parentCateList: [],\r\n                // 指定级联选择器的配置对象\r\n                cascaderProps: {\r\n                    expandTrigger: 'hover',\r\n                    value: 'cat_id',\r\n                    label: 'cat_name',\r\n                    children: 'children',\r\n                    checkStrictly: true\r\n                },\r\n                // 选中的父级分类的id数组\r\n                selectedKeys: [],\r\n                // 控制修改分类名称对话框的显示与隐藏\r\n                editDialogVisible: false,\r\n                editCateForm: {}\r\n            }\r\n        },\r\n        created() {\r\n            this.getCateList()\r\n        },\r\n        methods: {\r\n            // 获取商品分类数据\r\n            async getCateList() {\r\n                const { data: result } = await this.request.get('/admin/categories', {\r\n                    params: this.queryInfo\r\n                })\r\n                if (result.meta.status !== 200) {\r\n                    return this.$message.error('获取商品分类失败！')\r\n                }\r\n                // 把数据列表赋值给cateList\r\n                // console.log(result)\r\n                console.log(result.data)\r\n                this.cateList = result.data.result\r\n                // 为总数据条数赋值\r\n                // console.log(result.total)\r\n                this.total = result.data.total\r\n            },\r\n            // 监听pagesize改变的事件\r\n            handleSizeChange(newSize) {\r\n                this.queryInfo.pagesize = newSize\r\n                // 刷新数据\r\n                this.getCateList()\r\n            },\r\n            // 监听pagenum改变的事件\r\n            handleCurrentChange(newPage) {\r\n                this.queryInfo.pagenum = newPage\r\n                this.getCateList()\r\n            },\r\n            // 点击按钮，显示对话框\r\n            showAddCatDialog() {\r\n                // 先获取父级分类的数据列表\r\n                this.getParentCateList()\r\n                // 再展示对话框\r\n                this.addCateDialogVisible = true\r\n            },\r\n            // 获取父级分类的数据列表\r\n            async getParentCateList() {\r\n                const { data: result } = await this.request.get('/admin/categories', {\r\n                    params: { type: 2 }\r\n                })\r\n                if (result.meta.status !== 200) {\r\n                    return this.$message.error('获取父级分类数据失败！')\r\n                }\r\n                this.parentCateList = result.data\r\n            },\r\n            // 选择项发生变化触发\r\n            parentCateChanged() {\r\n                // console.log(this.selectedKeys)\r\n\r\n                // 如果selectedKeys数组中的length大于0，证明选中的父级分类\r\n                if (this.selectedKeys.length > 0) {\r\n                    // 父级分类的id\r\n                    this.addCateForm.cat_pid = this.selectedKeys[\r\n                    this.selectedKeys.length - 1\r\n                        ]\r\n                    // 为当前分类的等级赋值\r\n                    this.addCateForm.cat_level = this.selectedKeys.length\r\n                } else {\r\n                    // 反之，就说明没有选中任何父级分类\r\n                    this.addCateForm.cat_pid = 0\r\n                    this.addCateForm.cat_level = 0\r\n                }\r\n            },\r\n            // 点击确定按钮添加新的分类\r\n            addCate() {\r\n                // console.log(this.addCateForm)\r\n                this.$refs.addCateFormRef.validate(async valid => {\r\n                    if (!valid) return this.$message.error('表单预校验失败！')\r\n                    const { data: result } = await this.request.post(\r\n                        '/admin/categories',\r\n                        this.addCateForm\r\n                    )\r\n                    if (result.meta.status !== 201) {\r\n                        return this.$message.error('添加分类失败！')\r\n                    }\r\n                    this.$message.success('添加分类成功')\r\n                    // 刷新列表\r\n                    this.getCateList()\r\n                    // 隐藏对话框\r\n                    this.addCateDialogVisible = false\r\n                })\r\n            },\r\n            // 监听对话框的关闭事件，重置表单数据\r\n            addCateDialogClosed() {\r\n                this.$refs.addCateFormRef.resetFields()\r\n                this.selectedKeys = []\r\n                this.addCateForm.cat_level = 0\r\n                this.addCateForm.cat_pid = 0\r\n            },\r\n            // 展示编辑分类名称的对话框\r\n            async showEditDialog(id) {\r\n                this.editDialogVisible = true\r\n                const { data: result } = await this.request.get(`/admin/categories/${id}`)\r\n                if (result.meta.status !== 200) {\r\n                    return this.$message.error('查询分类数据失败！')\r\n                }\r\n                console.log(result.data)\r\n                this.editCateForm = result.data\r\n            },\r\n            // 监听修改分类名称对话框的关闭事件\r\n            editDialogClosed() {\r\n                this.$refs.editCateFormRef.resetFields()\r\n            },\r\n            // 修改分类名称信息，并提交\r\n            editCateInfo() {\r\n                this.$refs.editCateFormRef.validate(async valid => {\r\n                    if (!valid) return\r\n                    // 发起修改分类名称的数据请求\r\n                    const { data: result } = await this.request.put(`/admin/categories/${this.editCateForm.cat_id}`, { cat_name: this.editCateForm.cat_name })\r\n                    if (result.meta.status !== 200) return this.$message.error('更新分类名称失败！')\r\n                    // 关闭对话框\r\n                    this.editDialogVisible = false\r\n                    // 重新获取用户列表\r\n                    this.getCateList()\r\n                    // 提示修改成功\r\n                    this.$message.success('更新分类名称成功！')\r\n                })\r\n            },\r\n            async removeCateById(id) {\r\n                // 弹框提示用户是否删除数据\r\n                const confirmResult = await this.$confirm('此操作将永久删除该分类，是否继续？', '提示', {\r\n                    confirmButtonText: '确定',\r\n                    cancelButtonText: '取消',\r\n                    type: 'warning'\r\n                }).catch(error => error)\r\n                // console.log(confirmResult) // 确定：'confirm' 取消：报错:cancel catch之后就是'canel'\r\n                if (confirmResult !== 'confirm') {\r\n                    return this.$message.info('已经取消删除')\r\n                }\r\n                const { data: result } = await this.request.delete('/admin/categories/' + id)\r\n                if (result.meta.status !== 200) {\r\n                    return this.$message.error('删除分类失败')\r\n                }\r\n                this.$message.success('删除分类成功')\r\n                this.getCateList()\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .treetable {\r\n        margin-top: 15px;\r\n    }\r\n    .el-cascader {\r\n        width: 100%;\r\n    }\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}