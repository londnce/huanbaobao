{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from \"@/store\";\nVue.use(VueRouter);\nconst routes = [{\n  path: '/',\n  name: '后台管理',\n  component: () => import( /* webpackChunkName: \"Manage\" */'../views/Manage.vue'),\n  redirect: \"/home\",\n  children: [{\n    path: '/home',\n    name: '主页',\n    component: () => import( /* webpackChunkName: \"Home\" */'../views/Home.vue')\n  }, {\n    path: '/userManage',\n    name: '用户管理',\n    component: () => import( /* webpackChunkName: \"userManage\" */'../views/UserManage.vue')\n  }, {\n    path: '/productManage',\n    name: '商品管理',\n    component: () => import( /* webpackChunkName: \"productManage\" */'../views/ProductManage.vue')\n  }, {\n    path: '/categoryManage',\n    name: '分类管理',\n    component: () => import( /* webpackChunkName: \"categoryManage\" */'../views/CategoryManage.vue')\n  }, {\n    path: '/orderManage',\n    name: '订单管理',\n    component: () => import( /* webpackChunkName: \"orderManage\" */'../views/OrderManage.vue')\n  }, {\n    path: '/sale',\n    name: '销售柱状图',\n    component: () => import( /* webpackChunkName: \"sale\" */'../views/Sale.vue')\n  }, {\n    path: '/personal',\n    name: '个人信息',\n    component: () => import( /* webpackChunkName: \"personal\" */'../views/Personal.vue')\n  }, {\n    path: 'editPw',\n    name: '修改密码',\n    component: () => import( /* webpackChunkName: \"editPw\" */'../views/EditPw.vue')\n  }]\n}, {\n  path: '/login',\n  name: '后台登录',\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import( /* webpackChunkName: \"login\" */'../views/Login.vue')\n}];\nconst router = new VueRouter({\n  routes\n});\n\n// 提供一个重置路由的方法\nexport const resetRouter = () => {\n  router.matcher = new VueRouter({\n    routes\n  });\n};\n\n// 注意：刷新页面会导致页面路由重置\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n    // 获取当前的路由对象名称数组\n    const currentRouteNames = router.getRoutes().map(v => v.name);\n    if (!currentRouteNames.includes('Manage')) {\n      // 拼装动态路由\n      const manageRoute = {\n        path: '/',\n        name: 'home',\n        component: () => import('../views/Home.vue'),\n        redirect: \"/home\",\n        children: [{\n          path: 'person',\n          name: '个人信息',\n          component: () => import('../views/Personal.vue')\n        }, {\n          path: 'password',\n          name: '修改密码',\n          component: () => import('../views/EditPw.vue')\n        }]\n      };\n      const menus = JSON.parse(storeMenus);\n      menus.forEach(item => {\n        if (item.path) {\n          // 当且仅当path不为空的时候才去设置路由\n          let itemMenu = {\n            path: item.path.replace(\"/\", \"\"),\n            name: item.name,\n            component: () => import('../views/' + item.pagePath + '.vue')\n          };\n          manageRoute.children.push(itemMenu);\n        } else if (item.children.length) {\n          item.children.forEach(item => {\n            if (item.path) {\n              let itemMenu = {\n                path: item.path.replace(\"/\", \"\"),\n                name: item.name,\n                component: () => import('../views/' + item.pagePath + '.vue')\n              };\n              manageRoute.children.push(itemMenu);\n            }\n          });\n        }\n      });\n      // 动态添加到现在的路由对象中去\n      router.addRoute(manageRoute);\n    }\n  }\n};\n\n// 重置我就再set一次路由\nsetRoutes();\nrouter.beforeEach((to, from, next) => {\n  localStorage.setItem(\"currentPathName\", to.name); // 设置当前的路由名称\n  store.commit(\"setPath\");\n\n  // // 未找到路由的情况\n  // if (!to.matched.length) {\n  //   const storeMenus = localStorage.getItem(\"menus\")\n  //   if (storeMenus) {\n  //     next(\"/404\")\n  //   } else {\n  //     // 跳回登录页面\n  //     next(\"/login\")\n  //   }\n  // }\n  // 其他的情况都放行\n  next();\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","use","routes","path","name","component","redirect","children","router","resetRouter","matcher","setRoutes","storeMenus","localStorage","getItem","currentRouteNames","getRoutes","map","v","includes","manageRoute","menus","JSON","parse","forEach","item","itemMenu","replace","pagePath","push","length","addRoute","beforeEach","to","from","next","setItem","commit"],"sources":["C:/Users/londn/Desktop/springboot-环宝宝/vue/vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport store from \"@/store\";\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: '/',\n    name: '后台管理',\n    component: () => import(/* webpackChunkName: \"Manage\" */ '../views/Manage.vue'),\n    redirect: \"/home\",\n    children: [\n      {\n        path: '/home',\n        name: '主页',\n        component: () => import(/* webpackChunkName: \"Home\" */ '../views/Home.vue'),\n      },\n      {\n        path: '/userManage',\n        name: '用户管理',\n        component: () => import(/* webpackChunkName: \"userManage\" */ '../views/UserManage.vue')\n      },\n      {\n        path: '/productManage',\n        name: '商品管理',\n        component: () => import(/* webpackChunkName: \"productManage\" */ '../views/ProductManage.vue')\n      },\n      {\n        path: '/categoryManage',\n        name: '分类管理',\n        component: () => import(/* webpackChunkName: \"categoryManage\" */ '../views/CategoryManage.vue')\n      },\n      {\n        path: '/orderManage',\n        name: '订单管理',\n        component: () => import(/* webpackChunkName: \"orderManage\" */ '../views/OrderManage.vue')\n      },\n      {\n        path: '/sale',\n        name: '销售柱状图',\n        component: () => import(/* webpackChunkName: \"sale\" */ '../views/Sale.vue')\n      },\n      {\n        path: '/personal',\n        name: '个人信息',\n        component: () => import(/* webpackChunkName: \"personal\" */ '../views/Personal.vue')\n      },\n      { path: 'editPw',\n        name: '修改密码',\n        component: () => import(/* webpackChunkName: \"editPw\" */'../views/EditPw.vue')\n      },\n    ]\n  },\n  {\n    path: '/login',\n    name: '后台登录',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"login\" */ '../views/Login.vue')\n  },\n]\n\nconst router = new VueRouter({\n  routes\n})\n\n// 提供一个重置路由的方法\nexport const resetRouter = () => {\n  router.matcher = new VueRouter({\n    routes\n  })\n}\n\n// 注意：刷新页面会导致页面路由重置\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n\n    // 获取当前的路由对象名称数组\n    const currentRouteNames = router.getRoutes().map(v => v.name)\n    if (!currentRouteNames.includes('Manage')) {\n      // 拼装动态路由\n      const manageRoute = { path: '/', name: 'home', component: () => import('../views/Home.vue'), redirect: \"/home\", children: [\n          { path: 'person', name: '个人信息', component: () => import('../views/Personal.vue')},\n          { path: 'password', name: '修改密码', component: () => import('../views/EditPw.vue')}\n        ] }\n      const menus = JSON.parse(storeMenus)\n      menus.forEach(item => {\n        if (item.path) {  // 当且仅当path不为空的时候才去设置路由\n          let itemMenu = { path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue')}\n          manageRoute.children.push(itemMenu)\n        } else if(item.children.length) {\n          item.children.forEach(item => {\n            if (item.path) {\n              let itemMenu = { path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue')}\n              manageRoute.children.push(itemMenu)\n            }\n          })\n        }\n      })\n      // 动态添加到现在的路由对象中去\n      router.addRoute(manageRoute)\n    }\n\n  }\n}\n\n// 重置我就再set一次路由\nsetRoutes()\n\nrouter.beforeEach((to, from, next) => {\n  localStorage.setItem(\"currentPathName\", to.name)  // 设置当前的路由名称\n  store.commit(\"setPath\")\n\n  // // 未找到路由的情况\n  // if (!to.matched.length) {\n  //   const storeMenus = localStorage.getItem(\"menus\")\n  //   if (storeMenus) {\n  //     next(\"/404\")\n  //   } else {\n  //     // 跳回登录页面\n  //     next(\"/login\")\n  //   }\n  // }\n  // 其他的情况都放行\n  next()\n})\n\n\nexport default router\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}